#!/bin/bash

set -e
#set -x

usage() {
    echo "Usage: screenctl <display> <aspect> <command>"
    echo "    <display> the name of the screen to operate on"
    echo "    <aspect> one of \"scale\", \"refresh\", or \"rotate\""
    echo "    <command> one of:"
    echo "        get"
    echo "        get-simple"
    echo "        select"
    echo "        first"
    echo "        down"
    echo "        up"
    echo "        last"
}

main() {
    if [ $# -lt 3 ]; then
        usage
        exit
    fi

    DISPLAY=$1
    shift
    ASPECT=$1
    shift
    OPERATION=$1
    shift

    if [ ${ASPECT} == "scale" ]; then
        change_scale ${DISPLAY} ${OPERATION} $@
    elif [ ${ASPECT} == "refresh" ]; then
        change_refresh ${DISPLAY} ${OPERATION} $@
    elif [ ${ASPECT} == "rotate" ]; then
        change_rotation ${DISPLAY} ${OPERATION} $@
    else
        usage
        exit
    fi

}

change_refresh() {
    DISPLAY=$1
    OPERATION=$2

    if [ $OPERATION != "get" ] && [ $OPERATION != "get-simple" ]; then
        CURRENT_MODE=$(get_display ${DISPLAY})
        CURRENT_WIDTH=$(echo ${CURRENT_MODE} | jq '.actual.width')
        CURRENT_HEIGHT=$(echo ${CURRENT_MODE} | jq '.actual.height')

        CURRENT_REFRESH_THOUSANDS=$(echo ${CURRENT_MODE} | jq '.actual.refresh')

        if [ ${OPERATION} == "select" ]; then
            REFRESH_TO_SET=$3
        else
            CONFIG_FILE=~/.config/screenctl/refresh/config

            if [ $# -eq 3 ]; then
                CONFIG_FILE=$3
            fi

            REFRESH_TO_SET=$(stepper u32 $OPERATION $CURRENT_REFRESH_THOUSANDS $CONFIG_FILE)
        fi

        REFRESH_INT_TO_SET=$(echo $((${REFRESH_TO_SET} / 1000)))
        REFRESH_REM_TO_SET_NO_LEADING_ZEROS=$(echo $((${REFRESH_TO_SET} % 1000)))
        REFRESH_REM_TO_SET=$(echo ${REFRESH_REM_TO_SET_NO_LEADING_ZEROS} | python -c 'import sys; print("{:03d}".format(int(sys.stdin.read().strip())))')

        SWAY_MODE_TO_SET=$(echo "${CURRENT_WIDTH}x${CURRENT_HEIGHT}@${REFRESH_INT_TO_SET}.${REFRESH_REM_TO_SET}")

        set_output ${DISPLAY} ${SWAY_MODE_TO_SET}

        pkill -SIGRTMIN+6 i3status-rs
    fi

    CURRENT_MODE=$(get_display ${DISPLAY})
    CURRENT_WIDTH=$(echo ${CURRENT_MODE} | jq '.logical.width')
    CURRENT_HEIGHT=$(echo ${CURRENT_MODE} | jq '.logical.height')
    CURRENT_REFRESH_THOUSANDS=$(echo ${CURRENT_MODE} | jq '.actual.refresh')
    CURRENT_REFRESH_INT=$(echo $((${CURRENT_REFRESH_THOUSANDS} / 1000)))
    CURRENT_REFRESH_REM_NO_LEADING_ZEROS=$(echo $((${CURRENT_REFRESH_THOUSANDS} % 1000)))
    CURRENT_REFRESH_REM=$(echo ${CURRENT_REFRESH_REM_NO_LEADING_ZEROS} | python -c 'import sys; print("{:03d}".format(int(sys.stdin.read().strip())))')

    if [ $OPERATION == "get-simple" ]; then
        echo "${CURRENT_REFRESH_INT}.${CURRENT_REFRESH_REM}" | python -c 'import sys; print(round(float(sys.stdin.read().strip())))'
    else
        echo "${CURRENT_WIDTH}x${CURRENT_HEIGHT}@${CURRENT_REFRESH_INT}.${CURRENT_REFRESH_REM}Hz"
    fi
}

change_scale() {
    DISPLAY=$1
    OPERATION=$2

    CURRENT_SCALE=$(get_display ${DISPLAY} | jq ".logical.scale")

    if [ $OPERATION != "get" ] && [ $OPERATION != "get-simple" ]; then

        if [ $OPERATION == "select" ]; then
            SCALE_TO_SET=$3
        else
            CONFIG_FILE=~/.config/screenctl/scales/config

            if [ $# -eq 3 ]; then
                CONFIG_FILE=$3
            fi

            SCALE_TO_SET=$(stepper f32 $OPERATION $CURRENT_SCALE $CONFIG_FILE)
        fi

        set_scale ${DISPLAY} ${SCALE_TO_SET}

        pkill -SIGRTMIN+2 i3status-rs
    fi

    CURRENT_SWAY_OUTPUT=$(get_display ${DISPLAY})
    CURRENT_SCALE=$(echo $CURRENT_SWAY_OUTPUT | jq '.logical.scale')

    CURRENT_X=$(echo $CURRENT_SWAY_OUTPUT | jq '.logical.width')
    CURRENT_Y=$(echo $CURRENT_SWAY_OUTPUT | jq '.logical.height')

    if [ $OPERATION == "get-simple" ]; then
        echo "${CURRENT_X}x${CURRENT_Y}"
    else
        echo "${CURRENT_X}x${CURRENT_Y} ($(printf "%.4f" ${CURRENT_SCALE}))"
    fi
}

change_rotation() {
    DISPLAY=$1
    OPERATION=$2

    if [[ -n "${SWAYSOCK}" ]]; then
        if [ ${OPERATION} == "left" ]; then
            swaymsg output ${DISPLAY} transform 90 anticlockwise
            pkill -SIGRTMIN+2 i3status-rs
        elif [ ${OPERATION} == "right" ]; then
            swaymsg output ${DISPLAY} transform 90 clockwise
            pkill -SIGRTMIN+2 i3status-rs
        else
            echo "<rotate> argument must be one of \"left\" or \"right\""
            usage
            exit
        fi
    elif [[ -n "${NIRI_SOCKET}" ]]; then
        CURRENT_MODE=$(get_display ${DISPLAY} | jq '.logical.transform')
        if [ ${OPERATION} == "left" ]; then
            TRANSFORM_TO_SET=$(next_transform_down ${CURRENT_MODE})
            niri msg output ${DISPLAY} transform ${TRANSFORM_TO_SET}
            pkill -SIGRTMIN+2 i3status-rs
        elif [ ${OPERATION} == "right" ]; then
            TRANSFORM_TO_SET=$(next_transform_up ${CURRENT_MODE})
            niri msg output ${DISPLAY} transform ${TRANSFORM_TO_SET}
            pkill -SIGRTMIN+2 i3status-rs
        else
            echo "<rotate> argument must be one of \"left\" or \"right\""
            usage
            exit
        fi
    else
        echo "NO KNOWN WINDOW MANAGER"
        exit 1
    fi
}

next_transform_up() {
    CURRENT_MODE=$1

    case ${CURRENT_MODE} in
        "\"Normal\"") echo "90";;
        "\"90\"") echo "180";;
        "\"180\"") echo "270";;
        "\"270\"") echo "normal";;
    esac
}

next_transform_down() {
    CURRENT_MODE=$1

    case ${CURRENT_MODE} in
        "\"Normal\"") echo "270";;
        "\"90\"") echo "normal";;
        "\"180\"") echo "90";;
        "\"270\"") echo "180";;
    esac
}

get_display() {
    DISPLAY=$1

    if [[ -n "${SWAYSOCK}" ]]; then
        swaymsg -t get_outputs | jq ".[] | select(.name == \"${DISPLAY}\")" | \
            jq "{\
                logical: {width: .rect.width, height: .rect.height, scale: .scale, transform: 0}, \
                actual: {width: .current_mode.width, height: .current_mode.height, refresh: .current_mode.refresh}}"
    elif [[ -n "${NIRI_SOCKET}" ]]; then
        niri msg --json outputs | jq ".[\"${DISPLAY}\"]" | \
            jq "{\
                logical: {width: .logical.width, height: .logical.height, scale: .logical.scale, transform: .logical.transform}, \
                actual: {width: .modes[.current_mode].width, height: .modes[.current_mode].height, refresh: .modes[.current_mode].refresh_rate}}"
    else
        echo "NO KNOWN WINDOW MANAGER"
        exit 1
    fi
}

set_output() {
    DISPLAY=$1
    SWAY_MODE_TO_SET=$2

    if [[ -n "${SWAYSOCK}" ]]; then
        swaymsg output ${DISPLAY} mode "${SWAY_MODE_TO_SET}Hz"
    elif [[ -n "${NIRI_SOCKET}" ]]; then
        niri msg output ${DISPLAY} mode ${SWAY_MODE_TO_SET}
    else
        echo "NO KNOWN WINDOW MANAGER"
        exit 1
    fi
}

set_scale() {
    DISPLAY=$1
    SCALE_TO_SET=$2

    if [[ -n "${SWAYSOCK}" ]]; then
        swaymsg output ${DISPLAY} scale ${SCALE_TO_SET}
    elif [[ -n "${NIRI_SOCKET}" ]]; then
        niri msg output ${DISPLAY} scale ${SCALE_TO_SET}
    else
        echo "NO KNOWN WINDOW MANAGER"
        exit 1
    fi
}

main $@
